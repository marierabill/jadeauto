/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Manufacturer as PrismaManufacturer,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class ManufacturerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ManufacturerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.manufacturer.count(args);
  }

  async manufacturers(
    args: Prisma.ManufacturerFindManyArgs
  ): Promise<PrismaManufacturer[]> {
    return this.prisma.manufacturer.findMany(args);
  }
  async manufacturer(
    args: Prisma.ManufacturerFindUniqueArgs
  ): Promise<PrismaManufacturer | null> {
    return this.prisma.manufacturer.findUnique(args);
  }
  async createManufacturer(
    args: Prisma.ManufacturerCreateArgs
  ): Promise<PrismaManufacturer> {
    return this.prisma.manufacturer.create(args);
  }
  async updateManufacturer(
    args: Prisma.ManufacturerUpdateArgs
  ): Promise<PrismaManufacturer> {
    return this.prisma.manufacturer.update(args);
  }
  async deleteManufacturer(
    args: Prisma.ManufacturerDeleteArgs
  ): Promise<PrismaManufacturer> {
    return this.prisma.manufacturer.delete(args);
  }

  async findVehicles(
    parentId: string,
    args: Prisma.VehicleFindManyArgs
  ): Promise<PrismaVehicle[]> {
    return this.prisma.manufacturer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vehicles(args);
  }
}
